The "brige" facility allows for non-O2 connections to other processes.
These include:
 - non-TCP/IP connections through bluetooth, serial, MIDI, or other transports
 - TCP/IP connections to O2lite, a simplified single connection protocol
 - TCP connections through MQTT for long-distance connections
 - Possible future reworking of OSC support

bridge_info is an O2 node type, valid as a service.  For comparison,
services include handlers and hash tables for local services, and
process descriptors for remote services.

DESIGN OPTIONS

Let's call the non-O2 process the "bridged" process. There are two
design directions:

OPTION 1. Originally, O2 was designed to bridged connections by
extending process names, e.g. /192.168.2.100:4576:bluetooth1 would
direct messages to the process named by the IP:port part of the name,
and from there, the message would be forwarded to "bluetooth1." In
this approach, every process would be aware of
/192.168.2.100:4576:bluetooth1 as a separate process from
/192.168.2.100:4576.

OPTION 2. The second option is to "hide" the details of the bridged
process within the O2 process. Thus, a service in the bridged process
would appear to be local to the O2 process. Messages to the bridged
process would be delivered to the O2 process, delivered "locally" to a
handler described by a bridge_info structure, and this would relay the
message to the bridged service.

WHAT'S DIFFERENT?

1. Option 1 allows the same service name on both the O2 process and
the bridged process.

2. Option 1 results in every bridged process showing up as a remote
service known to every process.

3. Option 2 corresponds to the existing OSC implementation, where an
O2 service is "delegated" to an OSC server, and messages from OSC
clients are "forwarded" to O2 services.

4. Option 1 clock sync would relay clock requests and replies to the
master clock. Option 2 clock sync would synchronize the bridged
process to the O2 process, even if it is a clock mirror. This might
actually be better.

5. Option 1 has no way to send timed messages other than for the
bridged process to obtain clock sync. Option 2 could send timed
messages immediately to the bridged process if it has clock
sync. Otherwise, the O2 process could schedule the delivery, thus
providing scheduling at the expense of the transport delay from the
scheduler on the O2 process to the message delivery on the bridged
process.

6. Option 1 gives each bridged process a unique identifier by
extending the O2 process name with another token. With Option 2, there
is no such address, which complicates the process of obtaining status,
round-trip time, and returning clock sync pings.

Since we want to keep bridges as simple as possible, Option 2 seems
better.  More capable devices can run O2, so we assume inability to
run O2 implies a limited microcontroller for which we should make the
implementation simple.

BRIDGE API

Once a bridge is in place, a bridge_info node as a service handles
incoming messages. Tags for this type of node are BRIDGE_NOCLOCK and
BRIDGE_SYNCED.

Delivery to a BRIDGE_SYNCED tag will call a handler
(protocol->bridge_send) immediately, passing in the address of the
bridge_entry with tag BRIDGE_SYNCED. The bridge_info also contains a
void *info field on which the bridge can attach per-connection,
protocol-specific information.

Delivery to a BRIDGE_NOCLOCK tag with a non-zero timestamp will put
the message in the scheduling queue for later delivery.

Bridge services may need to be polled to drive network I/O. When a
bridge service is initialized, it can call o2_bridge_new() with a
function to be polled. Polling is stopped when o2_finish() is called
or when o2_bridge_remove() is called.

Bridge processes can send messages in a bridge-specific format to be
received by the bridge polling function and then delivered using
o2_send() or o2_send_cmd(), or bridge processes may send messages via
UDP or TCP. Because a bridge process is not a first-class O2 process,
it should not send or connect to O2 ports except for discovery.
Instead, the bridge poll function should create a UDP port and
possibly a TCP server port for each bridge process.

DISCOVERY

To avoid discovering arbitrary O2 hosts, a bridge should be explicitly
installed. For a give protocol, there should be a
protocol_initialize() function that installs the bridge. Discovery or
other attempts to connect to a particular process will fail until the
process initializes the protocol. Multiple O2 processes can enable a
bridge for the same protocol. This might mean that a process
connecting to a bridge could discover a remote host when a brige is
available on the local host. The to-be-bridged process might avoid
that by sending discovery messages to localhost only, or even trying
to discover a local process first, then looking for and responding to
remote processes.

Discovery is protocol-dependent, but see O2lite for an example. Clock
synchronization and service creation are also protocol-dependent, but
O2lite offers a model for how this can work.

O2LITE

Given this design, we can revisit the O2lite idea. O2lite should be
subset of the IP protocol described above with minimal functionality
to send and receive data including discovery.

O2LITE DISCOVERY 

Bridged process sends !_o2/o2lite/dy to all discovery port numbers,
with just the ensemble name, IP address and UDP port as parameters.

Any O2 process with o2lite enabled responds by sending !_o2/dy back to
the bridged process UDP port.

The O2 process also sends ordinary !_o2/dy discovery messages, so if
the bridged process does not broadcast to !_o2/dy, it will
still eventually get a discovery message.

When bridged process gets !_o2/dy, it makes a TCP connection to the O2
process. The O2 process accepts a connection, creating a proc_info
with name == NULL and tag == PROC_NOCLOCK. The bridged process
immediately sends !_o2/o2lite/con with the bridged process IP address
and UDP port. This frees the placeholder PROC_NOCLOCK proc_info and
replaces it with a bridge_info with tag BRIDGE_NOCLOCK.

The O2 process replies with !_o2/id with a small id number to identify
this connection and the bridged process. The O2 process keeps a table
mapping o2lite ID's to the bridge_info structures representing TCP
connections. (bridge_info structures also represent service
providers.)

To create a service, the bridged process sends to !_o2/o2lite/sv with
its ID, service-name, exists-flag, service-flag, and
tapper-or-properties string.

For clock synchronization, the bridged process sends to
!_o2/o2lite/cs/get with id, sequence-number, and reply-to-address.

When clock synchronization is obtained, the bridged process sends to
!/o2/o2lite/cs/cs with no args.

The minimal discovery implementation is the following sequence:
         o2 process: broadcast !_o2/dy
    bridged process: send !_o2/o2lite/con 
         o2 process: send !_o2/id
    bridged process: send !_o2/o2lite/sv
This can be followed by the clock sync protocol:
    bridged process: send !_o2/o2lite/cs/get 
         o2 process: send !_o2/cs/get-reply 
    (previous 2 messages are repeated) 
    bridged process: send !_o2/o2lite/cs/cs  
This can be preceded by discovery requests:
    bridged process: broadcast !_o2/o2lite/dy
    (message broadcasts to different ports until connected)


O2LITE TCP

The bridged process must be a TCP client, but does not need to be a
server.

O2LITE LOCAL ADDRESSES

!_o2/dy -- optional discovery message handler (message from discovery
           port)
_o2/id -- udp port and unique name from O2 process we accepted
!_o2/cs/get-reply -- clock sync return from ping


O2LITE SENDING O2 MESSAGES

Need to send these system messages:
/_o2/o2lite/sv id service-name exists-flag service-flag tapper-or-properties
/_o2/o2lite/cs/get id sequence-number "/_o2/cs"
/_o2/o2lite/cs/cs id

O2LITE MULTIPLE SERVICES

If we use a flat table and linear search, there is no extra work to
handling multiple services. Rather than keeping the state of services,
any change in a service can simply create and send a /_bh/sv message.

The main limitation of this is in O2, a remote service can preempt a
local service, and every process sees the same service. With O2lite,
we adopt the convention that every send is delivered across the bridge
(it may in fact loop back if a message is sent to a service provided
by the bridged process.) Bridged services may not conflict with local
services; the first service creator wins.


O2LITE PROPERTIES

Properties are useful for bridged processes. E.g. if there are several
sensors on microcomputers, properties could be used to identify the
sensor service to subscribe to, even if service names are created
dynamically so they cannot be easily wired in. To set properties on an
O2lite service, the bridged process can simply send the property
string as part of an !_bh/sv message. O2lite will not provide a
complete set of functions for manipulating property strings.

Getting properties of remote services is a bigger problem since
bridged processes do not receive !_o2/sv messages for all services. To
keep O2lite small, and since bridged messages have to hop to an O2
process anyway, it is suggested that the O2 process can offer a
service to implement processing and routing that depends upon
properties.
