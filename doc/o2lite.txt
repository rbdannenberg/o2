O2 Lite -- O2 for Espressif ESP32 and other small processors

Introduction
----

I recently used an ESP32 Thing from SparkFun to send sensor data from
a wearable sensor to a laptop. I used a dedicated WiFi network so that
the password and WiFi network name could be hard-coded into the ESP32
software. I also hard-coded the IP address of the laptop, so when the
ESP32 powers up, it automatically signs into the WiFi network and
begins sending OSC messages over UDP to a hard-coded port number on
the laptop.

There are several improvements that are desirable over this approach:

1. The ESP32 should find the laptop IP address automatically so that
the IP address of the laptop does not have to be set manually. (And OS
X does not remember the setting.)

2. The ESP32 should appear as a service to O2 hosts rather than an OSC
client. That would enable bi-directional communication and eliminate a
lot of setup code to create an OSC server with a hard-wired port
number.

3. The ESP32 should have a light-weight reusable library
implementation to send and receive messages between O2.

4. If ESP32 messages can be directed to an O2 host as O2 messages,
they can be relayed to other hosts as well, providing O2-like service
abstraction in a light-weight implementation.

5. Some form of clock sync should be supported as an option.

The Protocol
----

First, we need to find an O2 host (e.g. the laptop running a full O2
implementation). This can be done using a special broadcast discovery
message similar to the O2 discovery message. Similar to the "!_o2/dy"
address, we introduce a new address: "!_o2/dyl" (for
discovery-light). The parameters are:
    ensemble name (string) -- the O2 ensemble name
    local ip (string) -- the ESP32 IP address
    udp port (int32) -- the ESP32 port number
    service name (string) -- the ESP32 service name

For simplicity, the ESP32 supports only one service other than "_o2".

The message is sent to discovery ports via UDP broadcast. When
received, the O2 host replies with an acknowledgement message to
"!_o2/dyr" (for discovery-reply). The parameters are:
    host ip (string) -- the O2 host IP address
    host tcp (int32) -- the O2 host TCP server address
    host udp (int32) -- the O2 host UDP message address

The ESP32 can then (optionally), as a client, create a TCP connection
for reliable message transmission.

A small library is used to construct messages, supporting int32,
float, and string types. (Other types might be supported in the future
or with library options.)

To receive messages, the receiver handler uses a table mapping
addresses to handler functions, and linear search is used, based on
the assumption that the total number of addresses will be minimal and
known at compile time. The handler function will use low-level
functions to fetch parameters sequentially from the message, again to
simplify the implementation and reduce the need for dynamic memory
allocation. Only int32, float, and strings are supported.

Clock sync is accomplished by sending "/_cs/get" to the host with the
usual parameters:
    serial_no (int32) -- a serial number generated by ESP32
    reply_to (string) -- address for reply, which will be
        !SERVICE/_cs (note that this address uses the ESP32's
        service name, but it should not interfere with normal
        service addresses because of the initial underscore in _cs.)

The reply message to !SERVICE/_cs (via UDP) will contain:
    serial_no (int32) -- serial number sent by ESP32
    time -- the host's O2 time

The ESP32 will send a /_cs/get message periodically and compute the
mapping from ESP32 clock to O2 time in a similar fashion to O2's clock
sync.
