design.txt
Roger B. Dannenberg
July 2022/2025

O2 ensemble and initialization:
-------------------------------

There can be only one O2 process running in an application, and it
can join only one ensemble. This is inconsistent with the idea that
you create an o2ensemble object in Pd to interface with O2.

Initially there is no active o2ensemble. An o2ensemble becomes active
when it initializes O2 and remains active until deleted, even after
receiving a leave message which deactivates O2. To become
active, the o2ensemble object can either be created (if it specifies
and ensemble name) or can be sent a join message with a name. That
creates two features:
(1) o2-help, which has an o2ensemble box at the top as a "header"
does not become active (since it does not specify an ensemble), 
allowing some other o2ensemble to become active.
(2) When the active o2ensemble is deleted, we do not arbitrarily
assign the next o2ensemble object to be active, but allow the user
to decide when to send a join message, making the target active. In
this way the user and patch logic determine what happens after an
o2ensemble object is deleted rather than having some invisible
ordering automatically select an o2ensemble object and
(re)activate O2.

An o2ensemble remains active after a "leave" message is sent, allowing
a subsequent "join" message. Again, this avoids a case where some
hidden automated mechanism automatically selects an o2ensemble object
and reactivates O2. Maybe the user simply wants to change the O2
ensemble name. Of course, the user *does* have to know the active
o2ensemble object to make *any* changes, and this could depend on the
order in which patches are loaded.


Multiple receivers on the same address
--------------------------------------

    There are three problems to solve: 
(1) There can be 2 receive objects with the same address - both should
  receive copies of the message.
(2) There can be conflicting addresses and types, e.g. in O2, a
  handler for /foo/bar will override one for /foo/bar/baz. For Pd, we
  will only allow the creation of handlers that do *not* conflict with
  other handlers. Creating a conflict will *disable* the o2receive
  object until existing objects are deleted. Note that for two o2receive
  objects to receive from the same address, they must also specify the
  same type string (possibly no specification which defaults to "").
(3) We cannot create services or methods until O2 is initialized,
  which requires the creation of an o2ensemble object or sending a
  join message to an o2ensemble object if none is active yet. What is
  to prevent an o2receive object from getting initialized first? The
  solution is that a bang will re-initialize the o2receive object. If
  the object is active, the bang will be ignored, so an extra bang is
  harmless. If the object is not active and its address conflicts
  with an existing address, the bang is also ignored but an error
  message is printed. The bang will attempt to use the *last* address
  and type string for this object. The address and type string can be
  initialized when the object is created and changed by an address
  message, which sets the address whether there is a conflict or
  not. An address message is an alternative to sending a bang.
    Data structures: We keep a list of all active addresses. Each
address (with type information) points to a list of o2receive
objects. Each of these objects points back to the address if the
object is active and this is the address it receives from; otherwise,
the address is NULL, meaning inactive.
    Implementation: objects have an address field. The master list of
addresses is called addresses.
    When a new object is created, search *all* addresses for a 
conflict. If none, call o2_service_new if needed, then o2_method_new 
if needed, and add a new address to the list of all addresses. The 
o2receive object points to this address and is on the address's list. 
Otherwise, if there is a conflict, print an error and set address to NULL. 
    If an address message is received, and it has an address, remove 
the o2receiver from the address's receivers list and set the address 
field to NULL. If the address has no other receivers, remove the 
address and call o2_method_free(). Then if there are no addresses with
the same service, call o2_service_free().
    When an O2 message arrives, the handler's data parameter is the
address, which was put there by o2_method_new(). Deliver the message
to each handler in address's list of objects.
    When a t_o2rcv object is deleted, remove it from the list. Just as
when an address is changeed, if the address list becomes empty, remove
the address and call o2_method_free. Search the addresses for a
matching service, and if none, call o2_service_free.
    Note that you cannot have a general o2receive for every message to
a service while also having a specific o2receive for a specific
address within that service. The most recent address to become active
blocks the use of any other address until it is disabled. E.g. suppose
you have an o2receive object for /foo/bar. Now, you cannot create an
o2receive for /foo or /foo/bar/baz. To receive from /foo, you need to
(1) disable or delete or change the address of the o2receive for
/foo/bar, (2) send an address of /foo to the desired o2receive or
create a new o2receive with address /foo. (Any o2receive with /foo
created *before* deleting the one for /foo/bar will be not active, and 
it will not automatically start receiving even when the /foo/bar
conflict is removed. You must at least send it an "address /foo"
message to try again to receive from /foo.)

    POLLING
    o2ensemble is already polling at the Pd tick rate, so rather than 
schedule another time object, we will rely on o2ensemble to call o2_poll,
and callbacks from O2 will activate o2receive when messages arrive.


Notes for O2 externals:
-----------------------

o2ensemble [ensemble-name] [network-level] [o2lite-enable] [http-enable]
           [http-root] [-d flags]- control O2
    Initialization works like join, but if ensemble-name is not
        present, O2 remains uninitialized until a join message.

    In addition to the messages output in response to the following
        messages, this object can send the list
            "timejump" <localms> <oldms> <newms>
        to the output of the first o2ensemble object created. This
        corresponds to the o2_time_jump_callback function (see O2
        documentation), which is called when clock synchronization
        determines that the reference time has jumped (currently, by
        more than 1 sec, because less than 1 sec is handled by
        speeding up or slowing down by 10% to bring local time into
        alignment with reference time). The local time (since starting
        O2) is <localms>, the global (reference) time before the jump
        is <oldms>, and the global time after the jump is <newms>. To
        respond to this, you can send a clockjump message to this
        o2ensemble object. If you do not send clockjump, you will get
        the default behavior, which is to immediately set the clock
        forward if newms > oldms, and stop the local clock until oldms
        if newms < oldms (to prevent the observable time from going
        backward). The latter case can occur if the process with the
        reference clock is restarted. It may be simpler to just
        restart all clients when the clock reference process restarts.

  Messages:

    join ensemble-name [network-level] [o2lite-enable] [http-enable]
        [http-root] [-d flags] [-c clock] - ensemble-name is required;
        network-level defaults to 2 (connect to local area network and
        Internet if available), but 1 means local area network only,
        and 0 means local host only. 3 means Internet connectivity
        plus open a connection to the default MQTT broker for
        wide-area discovery. Instead of 3, a URL (symbol) means
        wide-area connectivity using an MQTT connection to the
        designated broker.  The URL may contain a suffix of the form
        ":1883" to also provide the broker's port number (in decimal);
        o2lite-enable defaults to 1 (enable o2lite connections), but 0
        means disable o2lite; http-enable defaults to 0, but 1 means
        provide an HTTP service and o2lite over WebSockets. To specify
        a port number for HTTP, use a symbol of the form ":8080"
        instead of 1. http-root defaults to "web", but may contain an
        absolute or relative path to the root of the web server's
        static pages. The -d flags option can be used even if previous
        optional parameters are missing, and passes debugging flags to
        O2. The -c flag is followed by 1 or 0 to enable or disable
        becoming the global time reference. The default is 1. Note
        that if two O2 processes claim to be the time reference, the
        process with the highest IP address and port number is the
        reference and lower processes provide a backup clock. If a
        join command does not provide at least an ensemble name, an
        error message is printed and the message has no other effect.
        If o2ensemble specified many parameters and then you shut
        down O2 with a leave message, you *must* supply all of those
        parameters again in a join message; otherwise, default values
        will be used.  For no particular reason, and unlike other
        parameters, the -d flags option is remembered once set by
        join or o2ensemble parameter list until overridden by a new
        join.

    leave - shut down all O2 services and connections. After O2 is
        joined by an o2ensemble object, that object becomes active
        and leave messages are ignored by all other o2ensemble
        objects. If the active o2ensemble object is deleted, *any*
        other o2ensemble object will respond to a leave message and
        shut down the O2 connections until O2 is joined again.

    version - causes the list "version <version>" to be output, where
        <version> is a symbol of the form 2.0.1

    addresses - causes a list with "address", the public ip, internal
        ip and TCP connection port for O2 to be output as strings in
        128.2.3.4 format and decimal format for port number.

    tap tappee tapper [-r] [-b] - tap a service. Use optional -r or
        -u to indicate reliable or unreliable (TCP) transport, and
        -k to indicate keep the same delivery mode. The default is
        -k (keep).

    untap tappee tapper - untap a service.

    status service -- output the status of service as an integer in
        a message of the form "status servicename 2".

    time -- output the current O2 time in a message of the form
        "time 3567.8", where time is in ms.

    clock reference -- make this host be the reference clock if
        reference is >0; otherwise, we do not provide the reference.
        This should be sent *before* the join message, and the
        clock reference is established after join. If no message is
        sent before join, this process will *not* provide the
        reference clock, so the default is as if "clock 0" was already
        sent. Note that timestamps cannot be used without a reference
        clock. Note also that if a second reference clock (which
        starts at t=0) joins the ensemble at time T, then all other
        processes will experienced stopped clocks until the new
        reference clock catches up to the rest of the ensemble, which
        will "stop time" for T seconds. Therefore, timed messages and
        clock synchronization works best with *one* reference clock
        whose process starts first and is not restarted for any
        reason. (A slightly more robust scheme could be: Start two
        reference clocks at about the same time. If one crashes, do
        not restart it, and the other will take over. Clocks will
        continue to run smoothly in synchrony.)

    clockjump localms globalms adjust -- Generally, this should only
        be sent directly in response to a timejump message (see
        above). localms should be the <localms> value and globalms
        should be the <newms> value. If the adjust parameter is
        non-zero, pending timestamped messages will have their
        delivery times adjusted so that they remain scheduled at the
        same wall time, e.g., if time jumps back 60 seconds,
        timestamps will be decremented by 60 seconds to
        compensate. Otherwise, timestamps remain and are interpreted
        according to the newly set clock.
        
    oscport service port [-r] [-b] - serve OSC messages to the given
        port by forwarding to service. The server uses UDP by default
        or with -b, and TCP with -r.

    oscdelegate service address port [-r] [-b] - forward O2 messages
        to service to OSC server at address (in the format 128.2.9.3)
        and port (decimal), using UDP by default or with -b, and TCP
        with -r.


o2send [address]* [-t types] [-r] [-b] - send an O2 message
    to a service. address is one or more
    nodes, e.g. |o2send synth 1 pitch -t f| will address messages to
    "/synth/1/pitch" containing a single float parameter. Either -r
    or -b flags may be present to indicate "reliable" or "best effort"
    (UDP) protocol.  If there is no service, the object will not send
    a message until an address message is received.

  Messages:
    address [node]+ - (re)set the address according to the provided
        list. The first node is the service name.

    types [typestring] - (re)set the typestring of the outgoing 
        message. Incoming parameters will be coerced to these types.
        If typestring is missing, incoming parameters are sent as is.

    time ms - send the next message at the given time in ms.
        Default time is 0 ("now").

    delay ms - send the next message after a delay of ms from now.

    list p1 p2 p3 ... - a list of values is coerced to the current 
        typestring if any and sent.  If there is no typestring, 
        floats are sent as floats and symbols are sent as symbols.

    status - output the status of the current service in the form of
        a list: [status <servicename> <status>], where <status> is a
        float.


o2receive [node]* [-t types] - receive O2 messages. If at least one
    node is present, a local service is offered if the service is not
    already offered locally. If additional nodes are present, only
    messages with the given path are received ("the given path" is the
    path constructed as /node1/node2/node3/.../nodeN).  The -t option
    specifies types, and incoming messages are coerced into the types
    if possible, and otherwise the message is dropped. If there are no
    types specified, messages are received as floats and symbols. If
    there are two o2receive objects with the same service and address
    nodes, then their types must be an exact match.  An o2receive
    object can receive messages for at most one O2 service. If address
    is omitted, no messages are received until an address message is
    received (see below). Output is a list of address nodes, the
    timestamp (a float) and message parameter values.
    Note that only one process can receive messages to a given
    service. Multiple o2receive objects can handle the same address
    within a process (Pd instance). Messages are delivered to every
    matching o2receive object. Actual delivery depends upon matching
    the address and types.

  Address conflict: an address is in conflict with another when one of
    the node sequences (nodes are the substrings between "/" separators)
    is a substring of the other (but they are not equal). Furthermore,
    equal addresses are in conflict if they are associated with
    unequal type strings. No two o2receive objects can receive with
    conflicting addresses, so only the first will receive O2
    messages (until it is deleted or disabled or the address is
    changed or O2 is shut down, after which any o2receive object can
    be created or sent the same or different address or a bang, all of
    which will start reception if there is no address conflict).

  Messages:
    address [node]+ [-t types] - (re)set the address according to the
        provided list. The first node is the service name. If there is
        only a service name and no additional address nodes, then
        *all* messages sent to the service will be handled by this
        object.  The optional typestring is used to check the
        incoming messages. Parameters are coerced to these types if
        possible and otherwise the message is not output. If typestring
        is omitted, all messages matching the address are accepted.
        This message may fail to set up O2 message reception if the
        address conflicts with another active o2receive object.

    bang - repeats the last address message (or intialization) if the
        o2receive object is not currently receiving O2 messages due to
        shutting down and restarting O2 or due to an earlier address
        conflict.

    disable - stop this object from handling any more messages. Use an
        address message or bang to reenable handling, but when an
        o2receive object is disabled, if another object begins
        receiving using a conflicting address, this o2receive will be
        blocked from restarting reception.

    types [typestring] - (re)set the typestring associated with this
        address. If there are other o2receive objects receiving from
        the same address, the o2receive with getting types will be in
        conflict with others, and therefore it will not resume
        receiving messages.

    
o2property [service] [attribute] - get an O2 property
  Messages:
    get service attribute - get the value of attribute from service.

    put service attribute [value] - put the value as attribute of
        service, or if value is omitted, delete the attribute from
        service. The service must be local; otherwise, the message
        is ignored.

    search attribute value - get service names where the
        service attribute is matched by value (using prefix ":"
        to match the beginning of the value and suffix ";" to match
        the end of the value, e.g., the value ":foo;" will only
        match if the service attribute's value is exactly "foo".
        A list of service names is output.

    bang - get the value of the attribute from service, using the
        most recent service and attribute from either a get or put,
        or using the initial values.
    

------------

implementation plan:

OK 1) make an object that outputs text every second using the hook. 

OK 2) output bang instead

OK 3) output a list of floats instead

OK 4) output a symbol

SKIP 5) output types of input

DONE 6) respond to two diffent messages

DONE 7) link with o2

DONE 8) implement o2ensemble initialize, use o2_debug to print things

9) add methods

10) o2send

11) o2receive


    
